// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.RecycleRush2538;

import java.awt.Frame;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2538.RecycleRush2538.commands.*;
import org.usfirst.frc2538.RecycleRush2538.subsystems.*;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    public static double frontHeavy;
    public static double balanced;
    public static double aftHeavy;
    public static Preferences prefs;
    public static String autoSettings;
    public static Compressor compressor;
    
    public static String defaultAutonomous = "";
    public static String autonomousSettings;
    
    private int session;
    private Image frame;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSystem driveSystem;
    public static Intake intake;
    public static Lift lift;
    public static Test test;
    public static OurTimer ourTimer;
    public static Camera camera;
    public static PowerDistributionBoard powerDistributionBoard;
    public static LED lED;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //public boolean compressorOn = compressor.enabled();

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
    	/***
    	 * The mDns box in smartdashboard preferences needs to be checked
    	 */
    	prefs = Preferences.getInstance();
    	frontHeavy = prefs.getDouble("frontHeavy", 1.0);
    	balanced = prefs.getDouble("balanced", 1.0);
    	aftHeavy = prefs.getDouble("aftHeavy", 1.0);
    	autoSettings = prefs.getString("auto", "no string");
    	
    	autonomousSettings = prefs.getString("autonomous", defaultAutonomous);
    	
    	
    	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
    	session = NIVision.IMAQdxOpenCamera("cam0", NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        NIVision.IMAQdxConfigureGrab(session);
        
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystem = new DriveSystem();
        intake = new Intake();
        lift = new Lift();
        test = new Test();
        ourTimer = new OurTimer();
        camera = new Camera();
        powerDistributionBoard = new PowerDistributionBoard();
        lED = new LED();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();
        Robot.driveSystem.resetGyro();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        Robot.driveSystem.makeWheels();
        intake.init();
        //SmartDashboard.putString("robot init", "auto" );
       
    }
		
    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	intake.init();
    	//autoSettings = prefs.getString("auto", "no string");
    	//SmartDashboard.putString("auto", autoSettings);
    	NIVision.IMAQdxStopAcquisition(session);
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	//autoSettings = prefs.getString("auto", "no string");
    	//SmartDashboard.putString("auto", autoSettings);
    	  autonomousCommand = new AutonomousCommand();
        if (autonomousCommand != null) {
        	autonomousCommand.start();
        	//SmartDashboard.putString("Auto start", "Autonomous started");
        } else {
        	SmartDashboard.putString("Auto start", "Autonomous is null");
        }
        frontHeavy = prefs.getDouble("frontHeavy", 1.0);
    	balanced = prefs.getDouble("balanced", 1.0);
    	aftHeavy = prefs.getDouble("aftHeavy", 1.0);
    	intake.init();
    	Robot.driveSystem.resetGyro();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        //autoSettings = prefs.getString("auto", "no string");
        //SmartDashboard.putString("auto", autoSettings);
        frontHeavy = prefs.getDouble("frontHeavy", 1.0);
    	balanced = prefs.getDouble("balanced", 1.0);
    	aftHeavy = prefs.getDouble("aftHeavy", 1.0);
    	intake.init();
    	
    	NIVision.IMAQdxStartAcquisition(session);
    	Robot.driveSystem.resetGyro();
    	Robot.intake.intake();
    	Robot.driveSystem.forwardRangeFinder.startSensor();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();  
        
        //setting = Preferences.getInstance().getDouble("Setting", -1.0); 
        //Preferences.getInstance().save();
        
        NIVision.IMAQdxGrab(session, frame, 1);
        
        CameraServer.getInstance().setImage(frame);
        SmartDashboard.putNumber("forward distance", Robot.driveSystem.forwardRangeFinder.getRangeCM());
       // SmartDashboard.putBoolean("compressorOn", compressorOn);
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
