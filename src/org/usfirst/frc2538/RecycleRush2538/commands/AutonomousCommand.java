// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2538.RecycleRush2538.commands;

import java.util.ArrayList;

import org.usfirst.frc2538.RecycleRush2538.Robot;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {

	public AutonomousCommand() {
		String input = Robot.prefs.getString("autonomous", "1");
		if (input.trim() == "1") {
			SmartDashboard.putString("auto mode:", "get thing");
			addSequential(new SetBalanced());
			addSequential(new GetThing());
			addSequential(new AutoDriveForward(0.3), 2);
			addSequential(new StackThing());
			addSequential(new AutoDriveForward(0.3), 2);
			addSequential(new StackThing());
			addSequential(new AutoDriveSideways(), 2);
		}
		
		input = input.toUpperCase();
		input = input.trim();
		ArrayList<String> commands = new ArrayList<String>();
		String currentCommand = "";
		
		for (int i = 0; i < input.length(); i++) {
			if (input.charAt(i) != ';') {
				currentCommand += input.charAt(i);
			}
			else {
				commands.add(currentCommand);
				currentCommand = "";
			}
		}
		
		for (int i = 0; i < commands.size(); i++) {
			String laCommandCourant = commands.get(i);
			double argumentOne;
			double argumentTwo;
			if (laCommandCourant.charAt(0) == 'F') {
				String argumentOneSubstring = laCommandCourant.substring(2, 4);
				String argumentTwoSubstring = laCommandCourant.substring(6, 8);
				argumentOne = new Double(argumentOneSubstring);
				argumentTwo = new Double(argumentTwoSubstring);
				addSequential(new AutoDriveForward(argumentOne), argumentTwo);
			}
			else if(laCommandCourant.charAt(0) == 'A') {
				String argumentOneSubstring = laCommandCourant.substring(2, 4);
				argumentOne = new Double(argumentOneSubstring);
				addSequential(new AutoDriveRight(), argumentOne);
			}
			else if (laCommandCourant.charAt(0) == 'L') {
				String argumentOneSubstring = laCommandCourant.substring(2, 4);
				argumentOne = new Double(argumentOneSubstring);
				addSequential(new AutoDriveLeft(), argumentOne);
			}
			else if (laCommandCourant.charAt(0) == 'P') {
				String argumentOneSubstring = laCommandCourant.substring(2, 4);
				argumentOne = new Double(argumentOneSubstring);
				addSequential(new AutoTurnLeft(), argumentOne);
			}
			else if (laCommandCourant.charAt(0) == 'S') {
				String argumentOneSubstring = laCommandCourant.substring(2, 4);
				argumentOne = new Double(argumentOneSubstring);
				addSequential(new AutoTurnRight(), argumentOne);
			}
			else if (laCommandCourant.charAt(0) == 'G') {
				addSequential(new GetThing());
			}
			else if (laCommandCourant.charAt(0) == 'H') {
				addSequential(new StackThing());
			}
			else if (laCommandCourant.charAt(0) == 'E') {
				addSequential(new EjectGroup());
			}
			else if (laCommandCourant.charAt(0) == 'T') {
				String argumentOneSubstring = laCommandCourant.substring(2, 4);
				argumentOne = new Double(argumentOneSubstring);
				addSequential(new eject(), argumentOne);
			}
			else if (laCommandCourant.charAt(0) == 'O') {
				addSequential(new OpenConfigCommand());
			}
			else if (laCommandCourant.charAt(0) == 'C') {
				addSequential(new ClosedConfigCommand());
			}
			else if (laCommandCourant.charAt(0) == 'I') {
				String argumentOneSubstring = laCommandCourant.substring(2, 4);
				argumentOne = new Double(argumentOneSubstring);
				addSequential(new intakeCommand(), argumentOne);
			}
			else if (laCommandCourant.charAt(0) == 'B') {
				addSequential(new ContainerLift());
			}
			else if (laCommandCourant.charAt(0) == '?') {
				addSequential(new AutoCenterGroup());
			}
			else if (laCommandCourant.charAt(0) == '<') {
				addSequential(new AutoPassiveContainerRemovalGroup());
			}
			else if (laCommandCourant.charAt(0) == '>') {
				addSequential(new AutoAggressiveSpinGroup());
			}
		}
	
		/*
		else {
			SmartDashboard.putString("auto mode:", "do nothing");
			addSequential(new SetBalanced());
			addSequential(new AutoDriveForward(0.8), 2);
		}
		*/
		SmartDashboard.putString("auto auto", input);
		
		
	}
}
