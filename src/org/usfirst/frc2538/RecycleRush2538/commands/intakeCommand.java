// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.RecycleRush2538.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2538.RecycleRush2538.Robot;

/**
 *
 */
public class  intakeCommand extends Command {
	private int debugCounter = 0;

    public intakeCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    	SmartDashboard.putString("Intake Intialized", "I'm initialized");
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putString("Intake Execute", "in execute" + debugCounter);
    	debugCounter++;
    	//System.out.println("Executing intake command");
    	Robot.intake.limitSwitchIntake();
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (!Robot.intake.okayContainer() || !Robot.intake.okayTote()){
        	SmartDashboard.putString("Intake IsFinished", "in isFinished: true");
        	return true;
		}
        SmartDashboard.putString("Intake Command", "in isFinished: false");
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	SmartDashboard.putString("Intaked End", "in end");
    	Robot.intake.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.intake.stop();
    }
}
